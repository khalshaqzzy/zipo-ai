/*
import { File } from '../models/File';
import { Quiz, IQuiz } from '../models/Quiz';
import { extractTextFromFile } from '../fileprocessing';
import { generativeModel, createQuizPrompt } from '../llm';


export const generateQuizFromFiles = async (
  fileIds: string[],
  instructions: string,
  questionCount: number,
  userId: string
): Promise<IQuiz> => {
  try {
    // 1. Fetch file documents from the database.
    const files = await File.find({
      _id: { $in: fileIds },
      userId: userId
    });

    if (files.length === 0) {
      throw new Error('No valid files found for the user.');
    }

    // 2. Extract text content from each file and aggregate it.
    const contentPromises = files.map(file =>
      extractTextFromFile(file.path, file.mimetype).then(content =>
        `--- START OF FILE: ${file.originalFilename} ---\n${content}\n--- END OF FILE: ${file.originalFilename} ---`
      )
    );
    const aggregatedContent = (await Promise.all(contentPromises)).join('\n\n');

    // 3. Create a detailed prompt for the generative model.
    const prompt = createQuizPrompt(aggregatedContent, instructions, questionCount);

    // 4. Call the generative model and get the response.
    console.log('Sending quiz generation prompt to LLM...');
    const result = await generativeModel.generateContent(prompt);
    const responseText = await result.response.text();
    console.log('Raw LLM response:', responseText);

    // 5. Parse the JSON from the raw text response.
    let quizData;
    try {
      const jsonMatch = responseText.match(/\{[^]*\}/);
      if (!jsonMatch) {
        throw new Error('No valid JSON object found in LLM response.');
      }
      quizData = JSON.parse(jsonMatch[0]);
    } catch (parseError) {
      console.error('Failed to parse LLM response as JSON:', parseError);
      throw new Error('Invalid response format from AI. Could not parse JSON.');
    }

    if (!quizData.questions || !Array.isArray(quizData.questions) || quizData.questions.length === 0) {
      throw new Error('No valid questions were generated by the AI.');
    }

    // 6. Define quiz parameters and create the new quiz document.
    const timeLimitInMinutes = Math.max(questionCount * 2, 10); // 2 minutes per question, min 10

    const newQuiz = new Quiz({
      userId,
      title: quizData.title || 'Generated Quiz',
      questions: quizData.questions,
      timeLimit: timeLimitInMinutes,
      timeLeft: timeLimitInMinutes * 60, // Store timeLeft in seconds
      status: 'active',
      answers: {},
    });

    // 7. Save the quiz to the database.
    await newQuiz.save();

    console.log(`Quiz "${newQuiz.title}" saved with ID: ${newQuiz._id}`);
    
    return newQuiz;

  } catch (error) {
    console.error('Error in generateQuizFromFiles:', error);
    // Re-throw the error to be handled by the calling route.
    throw error;
  }
};
*/