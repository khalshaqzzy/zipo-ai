# Dockerfile for serving the React application over HTTPS.

# Stage 1: Build the React application
# This stage uses a Node.js image to build the static files for the frontend.
FROM node:22-alpine AS builder

# Set the working directory inside the container
WORKDIR /app

# Copy package.json and package-lock.json to leverage Docker cache
COPY package*.json ./

# Install project dependencies
RUN npm install

# Copy the rest of the application source code
COPY . .

# Build the application for production
# The output will be in the /app/dist directory
RUN npm run build

# Stage 2: Serve the application with Nginx (HTTPS)
# This stage uses a lightweight Nginx image to serve the built static files.
FROM nginx:stable-alpine

# Copy the built static files from the 'builder' stage to the Nginx HTML directory
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy the custom Nginx configuration for HTTPS
COPY nginx.https.conf /etc/nginx/conf.d/default.conf

# Expose port 80 for HTTP (for potential redirects or Certbot challenges)
EXPOSE 80

# Expose port 443 for HTTPS traffic
EXPOSE 443

# Start Nginx in the foreground
CMD ["nginx", "-g", "daemon off;"]
